# -*- mode: ruby -*-
# vi: set ft=ruby :

builds = {
  'zookeeper1.com' => {
    id: "11",
    ip: "192.168.10.25",
    role: "zookeeper",
    memory: "512",
    deployId: "1"
  },
  'zookeeper2.com' => {
    id: "12",
    ip: "192.168.10.26",
    role: "zookeeper",
    memory: "512",
    deployId: "2"
  },
  'zookeeper3.com' => {
    id: "13",
    ip: "192.168.10.27",
    role: "zookeeper",
    memory: "512",
    deployId: "3"
  },
  'namenode.com' => {
    ip: "192.168.10.32",
    role: "namenode",
    memory: "512",
  },
  'snamenode.com' => {
    ip: "192.168.10.33",
    role: "snamenode",
    memory: "512",
  },
  'datanode1.com' => {
    ip: "192.168.10.34",
    role: "datanode",
    memory: "512",
  },
  'datanode2.com' => {
    ip: "192.168.10.35",
    role: "datanode",
    memory: "512",
  },
  'clustermonitor.com' => {
    ip: "192.168.10.52",
    role: "clustermonitor",
    memory: "2048"
  }
}

Vagrant.configure("2") do |config|

  config.vm.box = "centos/7"

  builds.each_pair do |name, opts|
      config.vm.define name.to_sym do |guest|
        guest.vm.network "private_network", ip: opts[:ip]

        guest.vm.provider "virtualbox" do |vb|
          vb.memory = opts[:memory]
        end

        case opts[:role]
        when "zookeeper"
          guest.vm.provision :shell, :path => "deployZookeeper.sh", :args => "#{opts[:deployId]}"
        when "clustermonitor"
          guest.vm.provision :shell, :path => "deployMonitor.sh", :args => "#{opts[:id]}"
        end

      end
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
